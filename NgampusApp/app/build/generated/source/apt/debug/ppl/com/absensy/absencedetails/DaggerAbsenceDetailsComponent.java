// Generated by Dagger (https://google.github.io/dagger).
package ppl.com.absensy.absencedetails;

import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ppl.com.absensy.absencedetails.recyclerviewabsencedetails.RecyclerViewAbsenceDetailsAdapter;
import ppl.com.absensy.absencedetails.recyclerviewabsencedetails.RecyclerViewAbsenceDetailsModule;
import ppl.com.absensy.absencedetails.recyclerviewabsencedetails.RecyclerViewAbsenceDetailsModule_ProvidesRecyclerViewAbsenceDetailsAdapterFactory;
import ppl.com.absensy.app.AbsensyAppComponent;
import ppl.com.absensy.repository.AppDatabase;

public final class DaggerAbsenceDetailsComponent implements AbsenceDetailsComponent {
  private ppl_com_absensy_app_AbsensyAppComponent_appDatabase appDatabaseProvider;

  private Provider<AbsenceDetailsContract.Presenter> providesAbsenceDetailsPresenterProvider;

  private Provider<RecyclerViewAbsenceDetailsAdapter>
      providesRecyclerViewAbsenceDetailsAdapterProvider;

  private DaggerAbsenceDetailsComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.appDatabaseProvider =
        new ppl_com_absensy_app_AbsensyAppComponent_appDatabase(builder.absensyAppComponent);
    this.providesAbsenceDetailsPresenterProvider =
        DoubleCheck.provider(
            AbsenceDetailsModule_ProvidesAbsenceDetailsPresenterFactory.create(
                builder.absenceDetailsModule, appDatabaseProvider));
    this.providesRecyclerViewAbsenceDetailsAdapterProvider =
        DoubleCheck.provider(
            RecyclerViewAbsenceDetailsModule_ProvidesRecyclerViewAbsenceDetailsAdapterFactory
                .create(builder.recyclerViewAbsenceDetailsModule));
  }

  @Override
  public void inject(AbsenceDetailsActivity absenceDetailsActivity) {
    injectAbsenceDetailsActivity(absenceDetailsActivity);
  }

  @CanIgnoreReturnValue
  private AbsenceDetailsActivity injectAbsenceDetailsActivity(AbsenceDetailsActivity instance) {
    AbsenceDetailsActivity_MembersInjector.injectPresenter(
        instance, providesAbsenceDetailsPresenterProvider.get());
    AbsenceDetailsActivity_MembersInjector.injectRecyclerViewAbsenceDetailsAdapter(
        instance, providesRecyclerViewAbsenceDetailsAdapterProvider.get());
    return instance;
  }

  public static final class Builder {
    private AbsenceDetailsModule absenceDetailsModule;

    private RecyclerViewAbsenceDetailsModule recyclerViewAbsenceDetailsModule;

    private AbsensyAppComponent absensyAppComponent;

    private Builder() {}

    public AbsenceDetailsComponent build() {
      if (absenceDetailsModule == null) {
        throw new IllegalStateException(
            AbsenceDetailsModule.class.getCanonicalName() + " must be set");
      }
      if (recyclerViewAbsenceDetailsModule == null) {
        this.recyclerViewAbsenceDetailsModule = new RecyclerViewAbsenceDetailsModule();
      }
      if (absensyAppComponent == null) {
        throw new IllegalStateException(
            AbsensyAppComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerAbsenceDetailsComponent(this);
    }

    public Builder absenceDetailsModule(AbsenceDetailsModule absenceDetailsModule) {
      this.absenceDetailsModule = Preconditions.checkNotNull(absenceDetailsModule);
      return this;
    }

    public Builder recyclerViewAbsenceDetailsModule(
        RecyclerViewAbsenceDetailsModule recyclerViewAbsenceDetailsModule) {
      this.recyclerViewAbsenceDetailsModule =
          Preconditions.checkNotNull(recyclerViewAbsenceDetailsModule);
      return this;
    }

    public Builder absensyAppComponent(AbsensyAppComponent absensyAppComponent) {
      this.absensyAppComponent = Preconditions.checkNotNull(absensyAppComponent);
      return this;
    }
  }

  private static class ppl_com_absensy_app_AbsensyAppComponent_appDatabase
      implements Provider<AppDatabase> {
    private final AbsensyAppComponent absensyAppComponent;

    ppl_com_absensy_app_AbsensyAppComponent_appDatabase(AbsensyAppComponent absensyAppComponent) {
      this.absensyAppComponent = absensyAppComponent;
    }

    @Override
    public AppDatabase get() {
      return Preconditions.checkNotNull(
          absensyAppComponent.appDatabase(),
          "Cannot return null from a non-@Nullable component method");
    }
  }
}
