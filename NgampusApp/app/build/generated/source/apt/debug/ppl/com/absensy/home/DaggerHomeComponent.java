// Generated by Dagger (https://google.github.io/dagger).
package ppl.com.absensy.home;

import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ppl.com.absensy.app.AbsensyAppComponent;
import ppl.com.absensy.home.recyclerviewsubject.RecyclerViewSubjectAdapter;
import ppl.com.absensy.home.recyclerviewsubject.RecyclerViewSubjectModule;
import ppl.com.absensy.home.recyclerviewsubject.RecyclerViewSubjectModule_ProvidesRecyclerViewSubjectAdapterFactory;
import ppl.com.absensy.reminder.ClassReminder;
import ppl.com.absensy.repository.AppDatabase;
import ppl.com.absensy.repository.SharedPreferencesManager;

public final class DaggerHomeComponent implements HomeComponent {
  private ppl_com_absensy_app_AbsensyAppComponent_appDatabase appDatabaseProvider;

  private ppl_com_absensy_app_AbsensyAppComponent_settingSharedPreferences
      settingSharedPreferencesProvider;

  private ppl_com_absensy_app_AbsensyAppComponent_classReminder classReminderProvider;

  private Provider<HomeContract.Presenter> providesHomePresenterProvider;

  private Provider<RecyclerViewSubjectAdapter> providesRecyclerViewSubjectAdapterProvider;

  private DaggerHomeComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.appDatabaseProvider =
        new ppl_com_absensy_app_AbsensyAppComponent_appDatabase(builder.absensyAppComponent);
    this.settingSharedPreferencesProvider =
        new ppl_com_absensy_app_AbsensyAppComponent_settingSharedPreferences(
            builder.absensyAppComponent);
    this.classReminderProvider =
        new ppl_com_absensy_app_AbsensyAppComponent_classReminder(builder.absensyAppComponent);
    this.providesHomePresenterProvider =
        DoubleCheck.provider(
            HomeModule_ProvidesHomePresenterFactory.create(
                builder.homeModule,
                appDatabaseProvider,
                settingSharedPreferencesProvider,
                classReminderProvider));
    this.providesRecyclerViewSubjectAdapterProvider =
        DoubleCheck.provider(
            RecyclerViewSubjectModule_ProvidesRecyclerViewSubjectAdapterFactory.create(
                builder.recyclerViewSubjectModule));
  }

  @Override
  public void inject(HomeActivity homeActivity) {
    injectHomeActivity(homeActivity);
  }

  @CanIgnoreReturnValue
  private HomeActivity injectHomeActivity(HomeActivity instance) {
    HomeActivity_MembersInjector.injectPresenter(instance, providesHomePresenterProvider.get());
    HomeActivity_MembersInjector.injectRecyclerViewSubjectAdapter(
        instance, providesRecyclerViewSubjectAdapterProvider.get());
    return instance;
  }

  public static final class Builder {
    private HomeModule homeModule;

    private RecyclerViewSubjectModule recyclerViewSubjectModule;

    private AbsensyAppComponent absensyAppComponent;

    private Builder() {}

    public HomeComponent build() {
      if (homeModule == null) {
        throw new IllegalStateException(HomeModule.class.getCanonicalName() + " must be set");
      }
      if (recyclerViewSubjectModule == null) {
        throw new IllegalStateException(
            RecyclerViewSubjectModule.class.getCanonicalName() + " must be set");
      }
      if (absensyAppComponent == null) {
        throw new IllegalStateException(
            AbsensyAppComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerHomeComponent(this);
    }

    public Builder homeModule(HomeModule homeModule) {
      this.homeModule = Preconditions.checkNotNull(homeModule);
      return this;
    }

    public Builder recyclerViewSubjectModule(RecyclerViewSubjectModule recyclerViewSubjectModule) {
      this.recyclerViewSubjectModule = Preconditions.checkNotNull(recyclerViewSubjectModule);
      return this;
    }

    public Builder absensyAppComponent(AbsensyAppComponent absensyAppComponent) {
      this.absensyAppComponent = Preconditions.checkNotNull(absensyAppComponent);
      return this;
    }
  }

  private static class ppl_com_absensy_app_AbsensyAppComponent_appDatabase
      implements Provider<AppDatabase> {
    private final AbsensyAppComponent absensyAppComponent;

    ppl_com_absensy_app_AbsensyAppComponent_appDatabase(AbsensyAppComponent absensyAppComponent) {
      this.absensyAppComponent = absensyAppComponent;
    }

    @Override
    public AppDatabase get() {
      return Preconditions.checkNotNull(
          absensyAppComponent.appDatabase(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class ppl_com_absensy_app_AbsensyAppComponent_settingSharedPreferences
      implements Provider<SharedPreferencesManager> {
    private final AbsensyAppComponent absensyAppComponent;

    ppl_com_absensy_app_AbsensyAppComponent_settingSharedPreferences(
        AbsensyAppComponent absensyAppComponent) {
      this.absensyAppComponent = absensyAppComponent;
    }

    @Override
    public SharedPreferencesManager get() {
      return Preconditions.checkNotNull(
          absensyAppComponent.settingSharedPreferences(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class ppl_com_absensy_app_AbsensyAppComponent_classReminder
      implements Provider<ClassReminder> {
    private final AbsensyAppComponent absensyAppComponent;

    ppl_com_absensy_app_AbsensyAppComponent_classReminder(AbsensyAppComponent absensyAppComponent) {
      this.absensyAppComponent = absensyAppComponent;
    }

    @Override
    public ClassReminder get() {
      return Preconditions.checkNotNull(
          absensyAppComponent.classReminder(),
          "Cannot return null from a non-@Nullable component method");
    }
  }
}
