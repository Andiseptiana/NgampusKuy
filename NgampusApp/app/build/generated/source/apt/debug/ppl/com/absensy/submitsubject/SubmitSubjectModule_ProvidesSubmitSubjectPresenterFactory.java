// Generated by Dagger (https://google.github.io/dagger).
package ppl.com.absensy.submitsubject;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ppl.com.absensy.reminder.ClassReminder;
import ppl.com.absensy.repository.AppDatabase;

public final class SubmitSubjectModule_ProvidesSubmitSubjectPresenterFactory
    implements Factory<SubmitSubjectContract.Presenter> {
  private final SubmitSubjectModule module;

  private final Provider<AppDatabase> appDatabaseProvider;

  private final Provider<ClassReminder> classReminderProvider;

  public SubmitSubjectModule_ProvidesSubmitSubjectPresenterFactory(
      SubmitSubjectModule module,
      Provider<AppDatabase> appDatabaseProvider,
      Provider<ClassReminder> classReminderProvider) {
    this.module = module;
    this.appDatabaseProvider = appDatabaseProvider;
    this.classReminderProvider = classReminderProvider;
  }

  @Override
  public SubmitSubjectContract.Presenter get() {
    return provideInstance(module, appDatabaseProvider, classReminderProvider);
  }

  public static SubmitSubjectContract.Presenter provideInstance(
      SubmitSubjectModule module,
      Provider<AppDatabase> appDatabaseProvider,
      Provider<ClassReminder> classReminderProvider) {
    return proxyProvidesSubmitSubjectPresenter(
        module, appDatabaseProvider.get(), classReminderProvider.get());
  }

  public static SubmitSubjectModule_ProvidesSubmitSubjectPresenterFactory create(
      SubmitSubjectModule module,
      Provider<AppDatabase> appDatabaseProvider,
      Provider<ClassReminder> classReminderProvider) {
    return new SubmitSubjectModule_ProvidesSubmitSubjectPresenterFactory(
        module, appDatabaseProvider, classReminderProvider);
  }

  public static SubmitSubjectContract.Presenter proxyProvidesSubmitSubjectPresenter(
      SubmitSubjectModule instance, AppDatabase appDatabase, ClassReminder classReminder) {
    return Preconditions.checkNotNull(
        instance.providesSubmitSubjectPresenter(appDatabase, classReminder),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
