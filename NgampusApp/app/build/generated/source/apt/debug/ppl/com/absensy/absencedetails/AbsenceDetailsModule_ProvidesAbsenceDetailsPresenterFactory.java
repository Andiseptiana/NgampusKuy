// Generated by Dagger (https://google.github.io/dagger).
package ppl.com.absensy.absencedetails;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ppl.com.absensy.repository.AppDatabase;

public final class AbsenceDetailsModule_ProvidesAbsenceDetailsPresenterFactory
    implements Factory<AbsenceDetailsContract.Presenter> {
  private final AbsenceDetailsModule module;

  private final Provider<AppDatabase> appDatabaseProvider;

  public AbsenceDetailsModule_ProvidesAbsenceDetailsPresenterFactory(
      AbsenceDetailsModule module, Provider<AppDatabase> appDatabaseProvider) {
    this.module = module;
    this.appDatabaseProvider = appDatabaseProvider;
  }

  @Override
  public AbsenceDetailsContract.Presenter get() {
    return provideInstance(module, appDatabaseProvider);
  }

  public static AbsenceDetailsContract.Presenter provideInstance(
      AbsenceDetailsModule module, Provider<AppDatabase> appDatabaseProvider) {
    return proxyProvidesAbsenceDetailsPresenter(module, appDatabaseProvider.get());
  }

  public static AbsenceDetailsModule_ProvidesAbsenceDetailsPresenterFactory create(
      AbsenceDetailsModule module, Provider<AppDatabase> appDatabaseProvider) {
    return new AbsenceDetailsModule_ProvidesAbsenceDetailsPresenterFactory(
        module, appDatabaseProvider);
  }

  public static AbsenceDetailsContract.Presenter proxyProvidesAbsenceDetailsPresenter(
      AbsenceDetailsModule instance, AppDatabase appDatabase) {
    return Preconditions.checkNotNull(
        instance.providesAbsenceDetailsPresenter(appDatabase),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
