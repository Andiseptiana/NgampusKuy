// Generated by Dagger (https://google.github.io/dagger).
package ppl.com.absensy.setting;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ppl.com.absensy.repository.SharedPreferencesManager;

public final class SettingModule_ProvidesSettingPresenterFactory
    implements Factory<SettingContract.Presenter> {
  private final SettingModule module;

  private final Provider<SharedPreferencesManager> sharedPreferencesManagerProvider;

  public SettingModule_ProvidesSettingPresenterFactory(
      SettingModule module, Provider<SharedPreferencesManager> sharedPreferencesManagerProvider) {
    this.module = module;
    this.sharedPreferencesManagerProvider = sharedPreferencesManagerProvider;
  }

  @Override
  public SettingContract.Presenter get() {
    return provideInstance(module, sharedPreferencesManagerProvider);
  }

  public static SettingContract.Presenter provideInstance(
      SettingModule module, Provider<SharedPreferencesManager> sharedPreferencesManagerProvider) {
    return proxyProvidesSettingPresenter(module, sharedPreferencesManagerProvider.get());
  }

  public static SettingModule_ProvidesSettingPresenterFactory create(
      SettingModule module, Provider<SharedPreferencesManager> sharedPreferencesManagerProvider) {
    return new SettingModule_ProvidesSettingPresenterFactory(
        module, sharedPreferencesManagerProvider);
  }

  public static SettingContract.Presenter proxyProvidesSettingPresenter(
      SettingModule instance, SharedPreferencesManager sharedPreferencesManager) {
    return Preconditions.checkNotNull(
        instance.providesSettingPresenter(sharedPreferencesManager),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
