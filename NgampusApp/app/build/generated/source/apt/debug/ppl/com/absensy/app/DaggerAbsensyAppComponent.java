// Generated by Dagger (https://google.github.io/dagger).
package ppl.com.absensy.app;

import android.app.Application;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ppl.com.absensy.reminder.ClassReminder;
import ppl.com.absensy.reminder.ClassReminderModule;
import ppl.com.absensy.reminder.ClassReminderModule_ProvidesClassReminderFactory;
import ppl.com.absensy.repository.AppDatabase;
import ppl.com.absensy.repository.RepositoryModule;
import ppl.com.absensy.repository.RepositoryModule_ProvidesAppDatabaseFactory;
import ppl.com.absensy.repository.RepositoryModule_ProvidesSettingSharedPreferencesFactory;
import ppl.com.absensy.repository.RepositoryModule_ProvidesSubjectDaoFactory;
import ppl.com.absensy.repository.SharedPreferencesManager;
import ppl.com.absensy.repository.SubjectDao;

public final class DaggerAbsensyAppComponent implements AbsensyAppComponent {
  private Provider<Application> providesApplicationProvider;

  private Provider<AppDatabase> providesAppDatabaseProvider;

  private Provider<SubjectDao> providesSubjectDaoProvider;

  private Provider<SharedPreferencesManager> providesSettingSharedPreferencesProvider;

  private Provider<ClassReminder> providesClassReminderProvider;

  private DaggerAbsensyAppComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.providesApplicationProvider =
        DoubleCheck.provider(
            AbsensyAppModule_ProvidesApplicationFactory.create(builder.absensyAppModule));
    this.providesAppDatabaseProvider =
        DoubleCheck.provider(
            RepositoryModule_ProvidesAppDatabaseFactory.create(
                builder.repositoryModule, providesApplicationProvider));
    this.providesSubjectDaoProvider =
        DoubleCheck.provider(
            RepositoryModule_ProvidesSubjectDaoFactory.create(
                builder.repositoryModule, providesApplicationProvider));
    this.providesSettingSharedPreferencesProvider =
        DoubleCheck.provider(
            RepositoryModule_ProvidesSettingSharedPreferencesFactory.create(
                builder.repositoryModule, providesApplicationProvider));
    this.providesClassReminderProvider =
        DoubleCheck.provider(
            ClassReminderModule_ProvidesClassReminderFactory.create(
                builder.classReminderModule, providesApplicationProvider));
  }

  @Override
  public AppDatabase appDatabase() {
    return providesAppDatabaseProvider.get();
  }

  @Override
  public SubjectDao subjectDao() {
    return providesSubjectDaoProvider.get();
  }

  @Override
  public SharedPreferencesManager settingSharedPreferences() {
    return providesSettingSharedPreferencesProvider.get();
  }

  @Override
  public ClassReminder classReminder() {
    return providesClassReminderProvider.get();
  }

  public static final class Builder {
    private AbsensyAppModule absensyAppModule;

    private RepositoryModule repositoryModule;

    private ClassReminderModule classReminderModule;

    private Builder() {}

    public AbsensyAppComponent build() {
      if (absensyAppModule == null) {
        throw new IllegalStateException(AbsensyAppModule.class.getCanonicalName() + " must be set");
      }
      if (repositoryModule == null) {
        this.repositoryModule = new RepositoryModule();
      }
      if (classReminderModule == null) {
        this.classReminderModule = new ClassReminderModule();
      }
      return new DaggerAbsensyAppComponent(this);
    }

    public Builder absensyAppModule(AbsensyAppModule absensyAppModule) {
      this.absensyAppModule = Preconditions.checkNotNull(absensyAppModule);
      return this;
    }

    public Builder repositoryModule(RepositoryModule repositoryModule) {
      this.repositoryModule = Preconditions.checkNotNull(repositoryModule);
      return this;
    }

    public Builder classReminderModule(ClassReminderModule classReminderModule) {
      this.classReminderModule = Preconditions.checkNotNull(classReminderModule);
      return this;
    }
  }
}
