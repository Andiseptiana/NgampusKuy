// Generated by Dagger (https://google.github.io/dagger).
package ppl.com.absensy.absencedetails.recyclerviewabsencedetails;

import dagger.internal.Factory;
import dagger.internal.Preconditions;

public final class RecyclerViewAbsenceDetailsModule_ProvidesRecyclerViewAbsenceDetailsAdapterFactory
    implements Factory<RecyclerViewAbsenceDetailsAdapter> {
  private final RecyclerViewAbsenceDetailsModule module;

  public RecyclerViewAbsenceDetailsModule_ProvidesRecyclerViewAbsenceDetailsAdapterFactory(
      RecyclerViewAbsenceDetailsModule module) {
    this.module = module;
  }

  @Override
  public RecyclerViewAbsenceDetailsAdapter get() {
    return provideInstance(module);
  }

  public static RecyclerViewAbsenceDetailsAdapter provideInstance(
      RecyclerViewAbsenceDetailsModule module) {
    return proxyProvidesRecyclerViewAbsenceDetailsAdapter(module);
  }

  public static RecyclerViewAbsenceDetailsModule_ProvidesRecyclerViewAbsenceDetailsAdapterFactory
      create(RecyclerViewAbsenceDetailsModule module) {
    return new RecyclerViewAbsenceDetailsModule_ProvidesRecyclerViewAbsenceDetailsAdapterFactory(
        module);
  }

  public static RecyclerViewAbsenceDetailsAdapter proxyProvidesRecyclerViewAbsenceDetailsAdapter(
      RecyclerViewAbsenceDetailsModule instance) {
    return Preconditions.checkNotNull(
        instance.providesRecyclerViewAbsenceDetailsAdapter(),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
