// Generated by Dagger (https://google.github.io/dagger).
package ppl.com.absensy.intro;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ppl.com.absensy.repository.SharedPreferencesManager;

public final class IntroModule_ProvidesIntroPresenterFactory
    implements Factory<IntroContract.Presenter> {
  private final IntroModule module;

  private final Provider<SharedPreferencesManager> sharedPreferencesManagerProvider;

  public IntroModule_ProvidesIntroPresenterFactory(
      IntroModule module, Provider<SharedPreferencesManager> sharedPreferencesManagerProvider) {
    this.module = module;
    this.sharedPreferencesManagerProvider = sharedPreferencesManagerProvider;
  }

  @Override
  public IntroContract.Presenter get() {
    return provideInstance(module, sharedPreferencesManagerProvider);
  }

  public static IntroContract.Presenter provideInstance(
      IntroModule module, Provider<SharedPreferencesManager> sharedPreferencesManagerProvider) {
    return proxyProvidesIntroPresenter(module, sharedPreferencesManagerProvider.get());
  }

  public static IntroModule_ProvidesIntroPresenterFactory create(
      IntroModule module, Provider<SharedPreferencesManager> sharedPreferencesManagerProvider) {
    return new IntroModule_ProvidesIntroPresenterFactory(module, sharedPreferencesManagerProvider);
  }

  public static IntroContract.Presenter proxyProvidesIntroPresenter(
      IntroModule instance, SharedPreferencesManager sharedPreferencesManager) {
    return Preconditions.checkNotNull(
        instance.providesIntroPresenter(sharedPreferencesManager),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
