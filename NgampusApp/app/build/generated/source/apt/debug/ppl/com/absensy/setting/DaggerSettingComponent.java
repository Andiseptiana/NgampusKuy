// Generated by Dagger (https://google.github.io/dagger).
package ppl.com.absensy.setting;

import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ppl.com.absensy.app.AbsensyAppComponent;
import ppl.com.absensy.repository.SharedPreferencesManager;

public final class DaggerSettingComponent implements SettingComponent {
  private ppl_com_absensy_app_AbsensyAppComponent_settingSharedPreferences
      settingSharedPreferencesProvider;

  private Provider<SettingContract.Presenter> providesSettingPresenterProvider;

  private DaggerSettingComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.settingSharedPreferencesProvider =
        new ppl_com_absensy_app_AbsensyAppComponent_settingSharedPreferences(
            builder.absensyAppComponent);
    this.providesSettingPresenterProvider =
        DoubleCheck.provider(
            SettingModule_ProvidesSettingPresenterFactory.create(
                builder.settingModule, settingSharedPreferencesProvider));
  }

  @Override
  public void inject(SettingActivity settingActivity) {
    injectSettingActivity(settingActivity);
  }

  @CanIgnoreReturnValue
  private SettingActivity injectSettingActivity(SettingActivity instance) {
    SettingActivity_MembersInjector.injectPresenter(
        instance, providesSettingPresenterProvider.get());
    return instance;
  }

  public static final class Builder {
    private SettingModule settingModule;

    private AbsensyAppComponent absensyAppComponent;

    private Builder() {}

    public SettingComponent build() {
      if (settingModule == null) {
        throw new IllegalStateException(SettingModule.class.getCanonicalName() + " must be set");
      }
      if (absensyAppComponent == null) {
        throw new IllegalStateException(
            AbsensyAppComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerSettingComponent(this);
    }

    public Builder settingModule(SettingModule settingModule) {
      this.settingModule = Preconditions.checkNotNull(settingModule);
      return this;
    }

    public Builder absensyAppComponent(AbsensyAppComponent absensyAppComponent) {
      this.absensyAppComponent = Preconditions.checkNotNull(absensyAppComponent);
      return this;
    }
  }

  private static class ppl_com_absensy_app_AbsensyAppComponent_settingSharedPreferences
      implements Provider<SharedPreferencesManager> {
    private final AbsensyAppComponent absensyAppComponent;

    ppl_com_absensy_app_AbsensyAppComponent_settingSharedPreferences(
        AbsensyAppComponent absensyAppComponent) {
      this.absensyAppComponent = absensyAppComponent;
    }

    @Override
    public SharedPreferencesManager get() {
      return Preconditions.checkNotNull(
          absensyAppComponent.settingSharedPreferences(),
          "Cannot return null from a non-@Nullable component method");
    }
  }
}
