// Generated by Dagger (https://google.github.io/dagger).
package ppl.com.absensy.reminder;

import android.app.Application;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ClassReminderModule_ProvidesClassReminderFactory
    implements Factory<ClassReminder> {
  private final ClassReminderModule module;

  private final Provider<Application> applicationProvider;

  public ClassReminderModule_ProvidesClassReminderFactory(
      ClassReminderModule module, Provider<Application> applicationProvider) {
    this.module = module;
    this.applicationProvider = applicationProvider;
  }

  @Override
  public ClassReminder get() {
    return provideInstance(module, applicationProvider);
  }

  public static ClassReminder provideInstance(
      ClassReminderModule module, Provider<Application> applicationProvider) {
    return proxyProvidesClassReminder(module, applicationProvider.get());
  }

  public static ClassReminderModule_ProvidesClassReminderFactory create(
      ClassReminderModule module, Provider<Application> applicationProvider) {
    return new ClassReminderModule_ProvidesClassReminderFactory(module, applicationProvider);
  }

  public static ClassReminder proxyProvidesClassReminder(
      ClassReminderModule instance, Application application) {
    return Preconditions.checkNotNull(
        instance.providesClassReminder(application),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
