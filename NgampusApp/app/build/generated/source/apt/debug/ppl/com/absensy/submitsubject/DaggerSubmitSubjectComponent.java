// Generated by Dagger (https://google.github.io/dagger).
package ppl.com.absensy.submitsubject;

import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ppl.com.absensy.app.AbsensyAppComponent;
import ppl.com.absensy.reminder.ClassReminder;
import ppl.com.absensy.repository.AppDatabase;

public final class DaggerSubmitSubjectComponent implements SubmitSubjectComponent {
  private ppl_com_absensy_app_AbsensyAppComponent_appDatabase appDatabaseProvider;

  private ppl_com_absensy_app_AbsensyAppComponent_classReminder classReminderProvider;

  private Provider<SubmitSubjectContract.Presenter> providesSubmitSubjectPresenterProvider;

  private DaggerSubmitSubjectComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.appDatabaseProvider =
        new ppl_com_absensy_app_AbsensyAppComponent_appDatabase(builder.absensyAppComponent);
    this.classReminderProvider =
        new ppl_com_absensy_app_AbsensyAppComponent_classReminder(builder.absensyAppComponent);
    this.providesSubmitSubjectPresenterProvider =
        DoubleCheck.provider(
            SubmitSubjectModule_ProvidesSubmitSubjectPresenterFactory.create(
                builder.submitSubjectModule, appDatabaseProvider, classReminderProvider));
  }

  @Override
  public void inject(SubmitSubjectActivity submitSubjectActivity) {
    injectSubmitSubjectActivity(submitSubjectActivity);
  }

  @CanIgnoreReturnValue
  private SubmitSubjectActivity injectSubmitSubjectActivity(SubmitSubjectActivity instance) {
    SubmitSubjectActivity_MembersInjector.injectPresenter(
        instance, providesSubmitSubjectPresenterProvider.get());
    return instance;
  }

  public static final class Builder {
    private SubmitSubjectModule submitSubjectModule;

    private AbsensyAppComponent absensyAppComponent;

    private Builder() {}

    public SubmitSubjectComponent build() {
      if (submitSubjectModule == null) {
        throw new IllegalStateException(
            SubmitSubjectModule.class.getCanonicalName() + " must be set");
      }
      if (absensyAppComponent == null) {
        throw new IllegalStateException(
            AbsensyAppComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerSubmitSubjectComponent(this);
    }

    public Builder submitSubjectModule(SubmitSubjectModule submitSubjectModule) {
      this.submitSubjectModule = Preconditions.checkNotNull(submitSubjectModule);
      return this;
    }

    public Builder absensyAppComponent(AbsensyAppComponent absensyAppComponent) {
      this.absensyAppComponent = Preconditions.checkNotNull(absensyAppComponent);
      return this;
    }
  }

  private static class ppl_com_absensy_app_AbsensyAppComponent_appDatabase
      implements Provider<AppDatabase> {
    private final AbsensyAppComponent absensyAppComponent;

    ppl_com_absensy_app_AbsensyAppComponent_appDatabase(AbsensyAppComponent absensyAppComponent) {
      this.absensyAppComponent = absensyAppComponent;
    }

    @Override
    public AppDatabase get() {
      return Preconditions.checkNotNull(
          absensyAppComponent.appDatabase(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class ppl_com_absensy_app_AbsensyAppComponent_classReminder
      implements Provider<ClassReminder> {
    private final AbsensyAppComponent absensyAppComponent;

    ppl_com_absensy_app_AbsensyAppComponent_classReminder(AbsensyAppComponent absensyAppComponent) {
      this.absensyAppComponent = absensyAppComponent;
    }

    @Override
    public ClassReminder get() {
      return Preconditions.checkNotNull(
          absensyAppComponent.classReminder(),
          "Cannot return null from a non-@Nullable component method");
    }
  }
}
